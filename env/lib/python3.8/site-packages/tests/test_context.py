"""Tests for getting context from request headers."""
import pytest

from requests.structures import CaseInsensitiveDict

from owsrequest import context
from owsrequest.constants import headers


@pytest.mark.parametrize((
    'request_headers',
    'expected_context_type',
    'expected_profile_type',
    'expected_profile_id',
    'expected_identity_id',
    'expected_identity_uuid',
    'has_orchard_user_id',
    'expected_orchard_user_id',
    'label_profile',
    'expected_roles',
    'expected_requestor_service_name'
), [
    # OrchAdmin headers - forced profiled
    (
        {
            headers.ORCHARD_USER_ID: 'oa:777',
            headers.ORCHARD_ROLES: 'catalog,analytics'
        },
        headers.CONTEXT_TYPE_PROFILE,
        headers.PROFILE_TYPE_ORCH_ADMIN,
        777,
        None,
        None,
        False,
        None,
        True,
        ['catalog', 'analytics'],
        None
    ),
    # OrchAdmin headers - no forced label
    (
        {
            headers.ORCHARD_USER_ID: 'oa:777',
            headers.ORCHARD_ROLES: 'catalog,analytics'
        },
        headers.CONTEXT_TYPE_ACCOUNT,
        None,
        None,
        None,
        None,
        True,
        'oa:777',
        False,
        ['catalog', 'analytics'],
        None
    ),
    # account based headers, all valid
    (
        {
            headers.GRASS_ACCOUNT_TYPE: 'vendor',
            headers.GRASS_ACCOUNT_ID: 7123,
            headers.ORCHARD_USER_ID: 'alw:777',
            headers.ORCHARD_ROLES: 'catalog,analytics',
            headers.ORCHARD_REQUESTOR_SERVICE: 'ows-grass'
        },
        headers.CONTEXT_TYPE_ACCOUNT,
        'vendor',
        7123,
        None,
        None,
        True,
        'alw:777',
        False,
        ['catalog', 'analytics'],
        'ows-grass'
    ),
    # account based headers, all valid, add identity_id
    (
        {
            headers.GRASS_ACCOUNT_TYPE: 'vendor',
            headers.GRASS_ACCOUNT_ID: 7123,
            headers.ORCHARD_USER_ID: 'alw:777',
            headers.ORCHARD_IDENTITY_ID: '5c067bc05f37972e07cb605f',
            headers.ORCHARD_ROLES: 'admin',
            headers.ORCHARD_REQUESTOR_SERVICE: 'graphql-product'
        },
        headers.CONTEXT_TYPE_ACCOUNT,
        'vendor',
        7123,
        '5c067bc05f37972e07cb605f',
        None,
        True,
        'alw:777',
        False,
        ['admin'],
        'graphql-product'
    ),
    # profile based headers, all valid
    (
        {
            headers.ORCHARD_PROFILE_TYPE: headers.PROFILE_TYPE_ARTIST,
            headers.ORCHARD_PROFILE_ID: 555
        },
        headers.CONTEXT_TYPE_PROFILE,
        headers.PROFILE_TYPE_ARTIST,
        555,
        None,
        None,
        False,
        None,
        False,
        None,
        None
    ),
    # profile based headers, all valid, add identity_id
    (
        {
            headers.ORCHARD_PROFILE_TYPE: headers.PROFILE_TYPE_ARTIST,
            headers.ORCHARD_PROFILE_ID: 555,
            headers.ORCHARD_IDENTITY_ID: '5c067bc05f37972e07cb605f'
        },
        headers.CONTEXT_TYPE_PROFILE,
        headers.PROFILE_TYPE_ARTIST,
        555,
        '5c067bc05f37972e07cb605f',
        None,
        False,
        None,
        False,
        None,
        None
    ),
    # both full headers, profile takes precedence
    (
        {
            headers.GRASS_ACCOUNT_TYPE: 'vendor',
            headers.GRASS_ACCOUNT_ID: 7123,
            headers.ORCHARD_USER_ID: 'alw:777',
            headers.ORCHARD_PROFILE_TYPE:  headers.PROFILE_TYPE_ARTIST,
            headers.ORCHARD_PROFILE_ID: 555,
            headers.ORCHARD_IDENTITY_ID: '5c067bc05f37972e07cb605f',
            headers.ORCHARD_IDENTITY_UUID: 'f5223b2c-e22b-4b48-a8b4-13e50b87b423' # noqa
        },
        headers.CONTEXT_TYPE_PROFILE,
        headers.PROFILE_TYPE_ARTIST,
        555,
        '5c067bc05f37972e07cb605f',
        'f5223b2c-e22b-4b48-a8b4-13e50b87b423',
        False,
        None,
        False,
        None,
        None
    ),
    # no headers
    (
        {},
        headers.CONTEXT_TYPE_NONE,
        None,
        None,
        None,
        None,
        False,
        None,
        False,
        None,
        None
    ),
    # malformed user grass headers, but ok user id
    (
        {
            headers.GRASS_ACCOUNT_TYPE: 'vendor',
            headers.ORCHARD_USER_ID: 'alw:777'
        },
        headers.CONTEXT_TYPE_ACCOUNT,
        None,
        None,
        None,
        None,
        True,
        'alw:777',
        False,
        None,
        None
    ),
    # malformed user grass headers, no user id
    (
        {
            headers.GRASS_ACCOUNT_TYPE: 'vendor'
        },
        headers.CONTEXT_TYPE_ERROR,
        None,
        None,
        None,
        None,
        False,
        None,
        False,
        None,
        None
    ),
    # malformed profile headers, but ok identity id
    (
        {
            headers.ORCHARD_PROFILE_TYPE: 'ArtistProfile',
            headers.ORCHARD_IDENTITY_ID: '5c067bc05f37972e07cb605f'
        },
        headers.CONTEXT_TYPE_PROFILE,
        None,
        None,
        '5c067bc05f37972e07cb605f',
        None,
        False,
        None,
        False,
        None,
        None
    ),
    # malformed profile headers, no identity id
    (
        {
            headers.ORCHARD_PROFILE_TYPE: 'ArtistProfile'
        },
        headers.CONTEXT_TYPE_ERROR,
        None,
        None,
        None,
        None,
        False,
        None,
        False,
        None,
        None
    ),
    # orchard user header, no profile
    (
        {
            headers.ORCHARD_USER_ID: 'alw:777',
            headers.ORCHARD_IDENTITY_ID: '5c067bc05f37972e07cb605f'
        },
        headers.CONTEXT_TYPE_PROFILE,
        headers.PROFILE_TYPE_LABEL,
        777,
        '5c067bc05f37972e07cb605f',
        None,
        False,
        None,
        True,
        None,
        None
    ),
    # only orchard identity id
    (
        {
            headers.ORCHARD_IDENTITY_ID: '5c067bc05f37972e07cb605f'
        },
        headers.CONTEXT_TYPE_PROFILE,
        None,
        None,
        '5c067bc05f37972e07cb605f',
        None,
        False,
        None,
        True,
        None,
        None
    ),
    # only orchard identity uuid
    (
        {
            headers.ORCHARD_IDENTITY_UUID: 'f5223b2c-e22b-4b48-a8b4-13e50b87b423' # noqa
        },
        headers.CONTEXT_TYPE_PROFILE,
        None,
        None,
        None,
        'f5223b2c-e22b-4b48-a8b4-13e50b87b423',
        False,
        None,
        True,
        None,
        None
    ),
    # only orchard identity uuid, title cased
    (
        {
            'Orchard-Identity-Uuid': 'f5223b2c-e22b-4b48-a8b4-13e50b87b423' # noqa
        },
        headers.CONTEXT_TYPE_PROFILE,
        None,
        None,
        None,
        'f5223b2c-e22b-4b48-a8b4-13e50b87b423',
        False,
        None,
        True,
        None,
        None
    ),
    # only orchard identity uuid, wonky cased
    (
        {
            'OrCharD-IdEnTIty-UuiD': 'f5223b2c-e22b-4b48-a8b4-13e50b87b423' # noqa
        },
        headers.CONTEXT_TYPE_PROFILE,
        None,
        None,
        None,
        'f5223b2c-e22b-4b48-a8b4-13e50b87b423',
        False,
        None,
        True,
        None,
        None
    )
])
def test_get_request_context_from_headers(
        request_headers,
        expected_context_type,
        expected_profile_type,
        expected_profile_id,
        expected_identity_id,
        expected_identity_uuid,
        has_orchard_user_id,
        expected_orchard_user_id,
        label_profile,
        expected_roles,
        expected_requestor_service_name):
    """Test verify_profile_headers_match_route."""
    request_context = context.get_request_context_from_headers(
        CaseInsensitiveDict(request_headers), label_profile=label_profile)
    assert request_context.context_type == expected_context_type
    assert hasattr(request_context, 'identity_id')
    assert hasattr(request_context, 'profile_type')
    assert hasattr(request_context, 'profile_id')
    if expected_profile_type:
        assert request_context.profile_type == expected_profile_type
    if expected_profile_id:
        assert request_context.profile_id == expected_profile_id
    if expected_identity_id:
        assert request_context.identity_id == expected_identity_id
    if expected_identity_uuid:
        assert request_context.identity_uuid == expected_identity_uuid
    if has_orchard_user_id:
        assert request_context.orchard_user_id == expected_orchard_user_id

    if expected_roles:
        assert request_context.roles == expected_roles
    else:
        assert not request_context.roles
    assert (request_context.requestor_service_name ==
            expected_requestor_service_name)


def test_get_request_context_from_headers_invalid_param():
    """Test that request_headers must be CaseInsensitiveDict."""
    type_error = None
    try:
        context.get_request_context_from_headers(
            {
                headers.ORCHARD_PROFILE_TYPE: 'ArtistProfile',
                headers.ORCHARD_IDENTITY_ID: '5c067bc05f37972e07cb605f'
            }, False)
    except TypeError as type_error:  # noqa: F841
        assert type_error.args[0] ==\
            'request_headers must be instance of CaseInsensitiveDict'
