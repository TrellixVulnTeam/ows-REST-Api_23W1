"""Tests against the DynamoDB model."""

import time

from unittest.mock import MagicMock
import boto3
import moto

from owsrequest import model
from owsrequest.config import logger


@moto.mock_dynamodb2
def create_mock_authorization(item):
    """Create authorization in a new Moto mocked DynamoDB table."""
    boto3.setup_default_session(region_name='us-east-1')
    client = boto3.resource('dynamodb')
    table = client.create_table(
        TableName='qa-ows-request-authorization',
        KeySchema=[
            {
                'AttributeName': 'authorization',
                'KeyType': 'HASH'
                # Partition key
            }
        ],
        AttributeDefinitions=[
            {
                'AttributeName': 'authorization',
                'AttributeType': 'S'
            }
        ],
        ProvisionedThroughput={
            'ReadCapacityUnits': 10,
            'WriteCapacityUnits': 10})
    table.put_item(Item=item)


def get_mock_authorization_dict():
    """Return fake authorization dynamo data."""
    return {
        'authorization': 'ows-lyrics:randomhmac123',
        'created_at': 1580458555,
        'secret': 'randomsecret123',
        'sender': 'ows-track'
    }


@moto.mock_dynamodb2
def test_get_authorization_logging(monkeypatch, mocker):
    """Test getting an authorization."""
    boto3.setup_default_session(region_name='us-east-1')
    data = get_mock_authorization_dict()
    create_mock_authorization(item=data)
    monkeypatch.setattr(
        time, 'time', MagicMock(return_value=1580458555))
    monkeypatch.setattr(
        model, 'request_latency', MagicMock(return_value=True))
    mocker.patch.object(logger, 'info', return_value='')
    response = model.get_authorization(
        'qa', 'ows-track/ows-lyrics:randomhmac123')

    assert response == data
    assert logger.info.called


@moto.mock_dynamodb2
def test_save_authorization_logging(monkeypatch, mocker):
    """Test saving an authorization."""
    boto3.setup_default_session(region_name='us-east-1')
    data = get_mock_authorization_dict()
    create_mock_authorization(item=data)
    monkeypatch.setattr(
        time, 'time', MagicMock(return_value=1580458555))
    monkeypatch.setattr(
        model, 'request_latency', MagicMock(return_value=True))
    mocker.patch.object(logger, 'info', return_value='')

    model.save_authorization(
        'qa', 'randomhmac123',
        data['sender'], 'ows-lyrics', data['secret'])
    assert logger.info.called
