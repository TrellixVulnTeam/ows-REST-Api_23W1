"""Flask Logger.

Util to quickly and easily setup logging on any flask application by calling
one single method: `setup`. Example::

    from flask import Flask
    from owslogger import flask_logger

    app = Flask(__name__)
    flask_logger.setup(
        app, 'https://logglyurl', 'dev', 'logger_name', logging.INFO,
        'service_name', '1.0.0')
"""

from functools import partial
from operator import itemgetter
import uuid

from ddtrace import tracer
from flask import g
from flask import request

from owslogger import constants
from owslogger import logger


class Ows:
    """Ows Objects."""

    pass


def setup(
        app, dsn, environment, logger_name, logger_level, service_name,
        service_version, exclude_paths=None, enable_autolog=True):
    """Setup logging for the flask application.

    Args:
        app (Flask): the application to add logging to.
        dsn (str): the data source name.
        environment (str): the application's environment.
        logger_name (str): name of the logger.
        logger_level (str): logging level of the logger.
        service_name (str): the service name.
        service_version (str): the service version.
        exclude_paths (list): optional list of paths to exclude.
        enable_autolog (boolean): auto-log information that relates to a
            response.
    """
    current_logger = logger.setup(
        dsn, environment, logger_name, logger_level, service_name,
        service_version)

    app.global_correlation_id = partial(
        global_correlation_id, current_logger, exclude_paths=exclude_paths)
    app.global_logger = partial(global_logger, current_logger)

    app.before_request(app.global_correlation_id)
    app.before_request(app.global_logger)
    app.after_request(add_correlation_id_to_response)

    if enable_autolog:
        app.after_request(partial(autolog, exclude_paths=exclude_paths))


def get_ows():
    """Get the ows object on the global.

    This is very useful when we want to keep a copy of all the different ows
    specific attributes set on flask.g.

    Returns:
        Ows: the ows namespace

    """
    if not hasattr(g, 'ows'):
        g.ows = Ows()
    return g.ows


def global_correlation_id(current_logger, exclude_paths=None):
    """Global correlation id.

    The correlation id is either provided by the request, and if not, it is
    created by the service and used whenever a call is made to another system.
    We are using flask.g, since Flask is thread safe.

    Args:
        current_logger (Logger): the app logger.
        exclude_paths (list): list of paths to exclude.

    Returns:
        None
    """
    exclude_paths = exclude_paths or []

    if hasattr(g, 'correlation_id'):
        return

    get_ows().correlation_id = request.headers.get(
        constants.CORRELATION_ID_HEADER)
    if not g.ows.correlation_id:
        g.ows.correlation_id = str(uuid.uuid1())
        message = (
            'Correlation-Id ({id}) created.'.format(id=g.ows.correlation_id))
    else:
        message = (
            'Correlation-Id ({id}) received.'.format(id=g.ows.correlation_id))

    g.correlation_id = g.ows.correlation_id
    global_logger(current_logger)

    if request.path not in exclude_paths:
        g.ows.log.debug(message)


def global_logger(current_logger):
    """Global logger.

    The global logger is used everywhere through the application. It formats
    the logs following our standards and it attaches additional information
    such as the correlation id.

    Code sample:

        from flask import g

        @app.route('/')
        def homepage():
            g.log.info('User has hit the homepage')

    Args:
        logger (Logger): the application logger.
    """
    global_correlation_id(current_logger)
    context = dict(correlation_id=g.correlation_id)
    get_ows().log = logger.OwsLoggingAdapter(current_logger, context)
    g.log = g.ows.log


def add_correlation_id_to_response(response):
    """Set correlation id into response header.

    Args:
        response (Flask.response): response object to hydrate

    Returns:
        Flask.response: response hydrated with correlation id

    """
    if response:
        response.headers[constants.CORRELATION_ID_HEADER] = (
            g.ows.correlation_id)
    return response


def autolog(response, exclude_paths=None):
    """Auto log a response.

    This mechanism allows us to send the result of a request to our different
    systems. It also includes additional information such as the user id,
    account type, and response code (if available).

    Args:
        response (Flask.response): response object to use.
        exclude_paths (list): paths to exclude from this.

    Returns:
        Flask.response: the provided response (non altered).

    """
    exclude_paths = exclude_paths or []
    if request.path in exclude_paths:
        return response

    resources = g.ows.log.resources
    resources.update(
        account_id=request.headers.get(constants.GRASS_ACCOUNT_ID_HEADER),
        account_type=request.headers.get(constants.GRASS_ACCOUNT_TYPE_HEADER),
        user_id=request.headers.get(constants.USER_ID_HEADER))
    resources = dict(filter(itemgetter(1), resources.items()))

    if hasattr(g, 'request_context') and g.request_context.context_type:
        resources.update(vars(g.request_context))

    root_span = tracer.current_root_span()
    if root_span:
        for name, value in resources.items():
            if value is not None:
                root_span.set_tag(
                    'request_context.{}'.format(name),
                    value)
        root_span.set_tag('correlation-id', g.ows.correlation_id)

    logger = g.ows.log.info
    if 299 < response.status_code < 499:
        logger = g.ows.log.warning
    elif 499 < response.status_code:
        logger = g.ows.log.error

    extra_message = g.ows.log.extra_message
    message = constants.AUTOLOG_MESSAGE_WITH_EXTRA
    if not extra_message:
        message = constants.AUTOLOG_MESSAGE

    logger(
        message.format(
            status=response.status_code,
            verb=request.method,
            resource=request.path,
            extra=extra_message),
        resources=resources)
    return response
