"""Service Discovery.

We rely on a simple convention to resolve services based on a name and
environment.

For resolving services in dev, we allow the specification of custom mappings
via an environment variable OWSREQUEST_SERVICE_MAP, which should be a JSON
dictionary mapping service names to urls.

"""

import json
import os

SERVICE_URL_SPEC = '{environment}-{service_name}.{domain}'
SERVICE_DEFAULT_DOMAIN = 'theorchard.io'


def get_dev_service_mapping():
    """Load service map from environment."""
    injected_mappings = os.environ.get('OWSREQUEST_SERVICE_MAP')
    if injected_mappings:
        return json.loads(injected_mappings)
    else:
        return {}


dev_service_mapping = get_dev_service_mapping()


def discover(service_name, environment):
    """Resolve the application name.

    In dev, services resolve by default to their qa versions.

    This behavior can be overridden by injecting a custom service
    mapping via the environment variable `OWSREQUEST_SERVICE_MAP`.
    Its value should be a JSON dictionary mapping service names
    to service urls.

    Args:
        service_name (str): the name of the service.
        environment (str): the environment.

    Returns:
        str: the service url.

    """
    environment = environment.lower()
    service_name = service_name.lower()

    if environment in ('qa', 'prod'):
        url = SERVICE_URL_SPEC.format(
            environment=environment,
            service_name=service_name,
            domain=SERVICE_DEFAULT_DOMAIN
        )
        return environment, url

    if environment == 'dev' and service_name in dev_service_mapping:
        url = dev_service_mapping.get(service_name)
        return environment, url
    else:
        # Default to qa
        url = SERVICE_URL_SPEC.format(
            environment='qa',
            service_name=service_name,
            domain=SERVICE_DEFAULT_DOMAIN
        )
        return 'qa', url
